package com.orienttech.statics.web.controller.updateDatas;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.ServletRequestDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.orienttech.statics.commons.base.BaseController;
import com.orienttech.statics.commons.base.Result;
import com.orienttech.statics.commons.datatables.DataTablesPage;
import com.orienttech.statics.commons.utils.FileUtils;
import com.orienttech.statics.dao.entity.FinancialLedgerDetails;
import com.orienttech.statics.service.updateDatas.UpdateDatasService;

@RequestMapping("/updateDatas")
@Controller
public class UpdateDatasController extends BaseController {
	
	@Autowired
	private UpdateDatasService updateDatasService;
	
	@RequestMapping
	public String index(Long functionId,Model model){
		
		return "/updateDatas/updateDatas";
	}
	
	@RequestMapping("/doAdd")
	@ResponseBody
	public Result add(Integer rowNum, String orgId, String orgName,
			String lendForm, BigDecimal lendAmt, BigDecimal lengBalance,
			String financingForm, String platformInstitution,
			String cashSourceName, String beginDate, String arriveDate,
			String contractTerm, BigDecimal contractRate,
			BigDecimal incomeExpense, String fundingSources,
			String guaranteeMode, String guarantor, String memo){
		
		FinancialLedgerDetails fld = new FinancialLedgerDetails();
		fld.setRowNum(rowNum);
		fld.setOrgId(orgId);
		fld.setOrgName(orgName);
		fld.setLendForm(lendForm);
		fld.setLendAmt(lendAmt);
		fld.setLengBalance(lengBalance);
		fld.setFinancingForm(financingForm);
		fld.setPlatformInstitution(platformInstitution);
		fld.setCashSourceName(cashSourceName);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date begin_Date = null;
		if(StringUtils.isNotBlank(beginDate)){
			try {
				begin_Date = sdf.parse(beginDate);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		Date arrive_Date = null;
		if(StringUtils.isNotBlank(arriveDate)){
			try {
				arrive_Date = sdf.parse(arriveDate);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		fld.setBeginDate(begin_Date);
		fld.setArriveDate(arrive_Date);
		if(StringUtils.isNotBlank(contractTerm)){
			fld.setContractTerm(Integer.valueOf(contractTerm));
		}
		fld.setContractRate(contractRate);
		fld.setIncomeExpense(incomeExpense);
		fld.setFundingSources(fundingSources);
		fld.setGuaranteeMode(guaranteeMode);
		fld.setGuarantor(guarantor);
		fld.setMemo(memo);
		
		String flag = updateDatasService.add(fld);
		
		
		return success(flag);
	}
	
	
	/**
	 * 获取datatables数据
	 * @param pageNumber
	 * @param pageSize
	 * @param sEcho
	 * @return
	 * @author wangxy 20160304
	 */
	@RequestMapping("/findAllDatas")
	@ResponseBody
	public DataTablesPage findAllDatas(@RequestParam("start") Integer pageNumber,@RequestParam("search[value]") String search,
			@RequestParam("length") Integer pageSize, Integer sEcho){
		
		Page<Object[]> page = updateDatasService.findAllDatas(pageNumber/pageSize + 1,pageSize,search);
		
		return new DataTablesPage(sEcho, page);
	}
	/**
	 * 上传文件
	 * @param myfile
	 * @return
	 * @author wangxy 20160304
	 */
	@RequestMapping("/uploadExcel")
	@ResponseBody
	public Result uploadExcel(@RequestParam(value = "uploadFile", required = false) MultipartFile myfile){

		String flag = updateDatasService.uploadExcel(myfile);
		return success(flag);
	}
	/**
	 * 修改信息
	 * @param fld
	 * @return
	 * @author wangxy 20160304
	 */
	@RequestMapping("/editDatas")
	@ResponseBody
	public Result editDatas(Integer rowNum, String orgId, String orgName,
			String lendForm, BigDecimal lendAmt, BigDecimal lengBalance,
			String financingForm, String platformInstitution,
			String cashSourceName, String beginDate, String arriveDate,
			String contractTerm, BigDecimal contractRate,
			BigDecimal incomeExpense, String fundingSources,
			String guaranteeMode, String guarantor, String memo){
		FinancialLedgerDetails fld = new FinancialLedgerDetails();
		fld.setRowNum(rowNum);
		fld.setOrgId(orgId);
		fld.setOrgName(orgName);
		fld.setLendForm(lendForm);
		fld.setLendAmt(lendAmt);
		fld.setLengBalance(lengBalance);
		fld.setFinancingForm(financingForm);
		fld.setPlatformInstitution(platformInstitution);
		fld.setCashSourceName(cashSourceName);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date begin_Date = null;
		if(StringUtils.isNotBlank(beginDate)){
			try {
				begin_Date = sdf.parse(beginDate);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		Date arrive_Date = null;
		if(StringUtils.isNotBlank(arriveDate)){
			try {
				arrive_Date = sdf.parse(arriveDate);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		fld.setBeginDate(begin_Date);
		fld.setArriveDate(arrive_Date);
		if(StringUtils.isNotBlank(contractTerm)){
			fld.setContractTerm(Integer.valueOf(contractTerm));
		}
		fld.setContractRate(contractRate);
		fld.setIncomeExpense(incomeExpense);
		fld.setFundingSources(fundingSources);
		fld.setGuaranteeMode(guaranteeMode);
		fld.setGuarantor(guarantor);
		fld.setMemo(memo);
		String flag = updateDatasService.modifyDatas(fld);
		return success(flag);
	}
	
	/**
	 * 更新录入
	 * @return
	 * @author wangxy 20160304
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	@RequestMapping(value = "/importDatas", method = RequestMethod.POST)
	@ResponseBody
	public String importDatas() throws FileNotFoundException, IOException {

		String flag = updateDatasService.importDatas();
		
		
		return flag;
	}
	
	@RequestMapping("/doDelete")
	@ResponseBody
	public String deleteData(Integer rowNum){
		String flag = updateDatasService.deleteData(rowNum);
		return flag;
	}
	
	@RequestMapping("/exportExcel")
	@ResponseBody
	public String exportExcel(){
		String fileName = updateDatasService.exportExcel();
		if(fileName == null){
			return "false";
		}
		
		return fileName;
	}
	
	@InitBinder
	public void initBinder(ServletRequestDataBinder binder){

		binder.registerCustomEditor(Date.class, new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd"), false));

	}
	
@RequestMapping("/download")
public void download(String outFileName, HttpServletRequest req, HttpServletResponse resp){
 
  try {
//         String filePath = FreemarkerUtils.wordPath+File.separator + outFileName + ".xlsx";
     logger.info("文件生成路径："+outFileName);
     FileUtils.downloadFile(new File(outFileName), "资金拆借表.xlsx", req, resp);
    
  } catch (IOException e) {
     e.printStackTrace();
     try {
        resp.sendError(HttpServletResponse.SC_NOT_FOUND, "文件未生成");
         } catch (IOException e1) {
            e1.printStackTrace();
         }
      }
   }
}
