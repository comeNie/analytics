package com.orienttech.statics.service.reportResultQuery.impl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.orienttech.statics.commons.dynamicquery.DynamicQuery;
import com.orienttech.statics.commons.security.SessionUser;
import com.orienttech.statics.dao.UserSsoDao;
import com.orienttech.statics.dao.entity.submission.TblTemplateSum;
import com.orienttech.statics.dao.submission.TblReportTemplateDao;
import com.orienttech.statics.dao.submission.TblTemplateSumDao;
import com.orienttech.statics.service.reportResultQuery.ReportResultQueryService;

@Service
public class ReportResultQueryServiceImpl implements ReportResultQueryService {

	@Autowired
	private DynamicQuery dynamicQuery;
	@Autowired
	private TblTemplateSumDao templateSumDao;
	@Autowired
	private UserSsoDao userSsoDao;

	@Override
	public Page<Object[]> queryReportResult(Integer pageNumber, Integer pageSize, String reportName, 
			String reportCycle, String sumTimeBegin, String sumTimeEnd, String sumPeople) {
		
		SessionUser sessionUser = (SessionUser) SecurityUtils.getSubject().getPrincipal();
		String loginName = sessionUser.getLoginName();
		String username = sessionUser.getUserName();
		String roleId = userSsoDao.queryRoleBySsoId(loginName);
		List<Object> params = new ArrayList<Object>();
		StringBuffer sql = new StringBuffer("select t1.id,t2.name,t2.cycle,t1.sum_time,t1.sum_people,t1.path,t1.sum_state");
		sql.append(" from tbl_template_sum t1 left join tbl_report_template t2");
		sql.append(" on t1.template_id=t2.id where (t1.sum_state='2')");
		int index=1;
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		if (StringUtils.isNotEmpty(roleId)) {//根据用户角色查询对应模板
			String[] roles = roleId.trim().split(",");
			if(roles.length>0){
				for(int i=0; i<roles.length; i++){
					String id = roles[i];
					if(i==0){
						sql.append(" and (");
					}else{
						sql.append(" or ");
					}
					sql.append(" t2.check_role=?").append(index++);
					params.add(id);
					sql.append(" or t2.check_role like ?").append(index++);
					params.add(id+",%");
					sql.append(" or t2.check_role like ?").append(index++);
					params.add("%,"+id+",%");
					sql.append(" or t2.check_role like ?").append(index++);
					params.add("%,"+id);
					if(i==roles.length-1){
						sql.append(" or t1.SUM_PEOPLE='" + username + "' ) ");
					}
				}
			}
		}
		if (StringUtils.isNotEmpty(reportName)) {
			sql.append(" and t2.name like ?"+index);
			params.add("%"+reportName+"%");
			index++;
		}
		if (StringUtils.isNotEmpty(reportCycle)) {
			sql.append(" and t2.cycle=?"+index);
			params.add(reportCycle);
			index++;
		}
		if (StringUtils.isNotEmpty(sumTimeBegin)) {
			sql.append(" and trunc(t1.sum_time,'dd')>=?"+index);
			try {
				params.add(sdf.parse(sumTimeBegin));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			index++;
		}
		if (StringUtils.isNotEmpty(sumTimeEnd)) {
			sql.append(" and trunc(t1.sum_time,'dd')<=?"+index);
			try {
				params.add(sdf.parse(sumTimeEnd));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			index++;
		}
		if (StringUtils.isNotEmpty(sumPeople)) {
			sql.append(" and t1.sum_people like ?"+index);
			params.add("%"+sumPeople+"%");
			index++;
		}
		sql.append(" order by t1.sum_time desc");
		return dynamicQuery.nativeQuery(Object[].class, new PageRequest(
				pageNumber - 1, pageSize), sql.toString(), params.toArray());
	}

	@Override
	public TblTemplateSum queryById(String id) {
		
		return templateSumDao.findOne(Integer.valueOf(id));
	}
	@Override
	public TblTemplateSum queryByWorkflowId(String workflowId) {
		
		return templateSumDao.findTblTemplateSumByTemplateId(workflowId);
	}
}


